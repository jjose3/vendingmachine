//
//--------------------------------------------------------------------------------
//          THIS FILE WAS AUTOMATICALLY GENERATED BY THE GENESIS2 ENGINE        
//  FOR MORE INFORMATION: OFER SHACHAM (CHIP GENESIS INC / STANFORD VLSI GROUP)
//    !! THIS VERSION OF GENESIS2 IS NOT FOR ANY COMMERCIAL USE !!
//     FOR COMMERCIAL LICENSE CONTACT SHACHAM@ALUMNI.STANFORD.EDU
//--------------------------------------------------------------------------------
//
//  
//	-----------------------------------------------
//	|            Genesis Release Info             |
//	|  $Change: 11904 $ --- $Date: 2013/08/03 $   |
//	-----------------------------------------------
//	
//
//  Source file: /afs/asu.edu/users/j/j/o/jjose3/vendingmachine/vendingmachine/rtl/vendingmachine.vp
//  Source template: vendingmachine
//
// --------------- Begin Pre-Generation Parameters Status Report ---------------
//
//	From 'generate' statement (priority=5):
//
//		---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----
//
//	From Command Line input (priority=4):
//
//		---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----
//
//	From XML input (priority=3):
//
//		---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----
//
//	From Config File input (priority=2):
//
// ---------------- End Pre-Generation Pramameters Status Report ----------------

// vendingmachine.vp


module vendingmachine (  
  input logic [1:0] coin,
  input logic coininserted,
  input logic clk,
  input logic rst,
  output logic coke,
  output logic [1:0] change_dime,
  output logic change_nickel,
  output logic [2:0] change_penny);
  
  logic [5:0] state, state_nxt;
  logic [4:0] change;

  parameter PENNY=2'b00, NICKEL=2'b01, DIME=2'b10, QUARTER=2'b11;
  
dff  D_FLIP_FLOP_STATE0 ( .d(state_nxt[0]), .q(state[0]), .clk(clk), .rst(rst));
dff  D_FLIP_FLOP_STATE1 ( .d(state_nxt[1]), .q(state[1]), .clk(clk), .rst(rst));
dff  D_FLIP_FLOP_STATE2 ( .d(state_nxt[2]), .q(state[2]), .clk(clk), .rst(rst));
dff  D_FLIP_FLOP_STATE3 ( .d(state_nxt[3]), .q(state[3]), .clk(clk), .rst(rst));
dff  D_FLIP_FLOP_STATE4 ( .d(state_nxt[4]), .q(state[4]), .clk(clk), .rst(rst));
dff  D_FLIP_FLOP_STATE5 ( .d(state_nxt[5]), .q(state[5]), .clk(clk), .rst(rst));
  
  
  always_comb begin
    if(~coke) begin
      unique case({coininserted,coin})
        {1'b1,PENNY} 	: state_nxt = state+1; //penny
        {1'b1,NICKEL} 	: state_nxt = state+5; //nickel
        {1'b1,DIME} 	: state_nxt = state+10; //dime
        {1'b1,QUARTER} 	: state_nxt = state+25; //quarter
        default 	: state_nxt = state;
      endcase
    end
    else begin
      state_nxt = 0;
    end
  end
  
  assign coke = (state >= 35) ? 1'b1 : 1'b0;

  assign change = {5{coke}} ? (state-6'd35) : 5'd0;
  
  assign change_dime = change/5'd10;
  assign change_nickel = (change%5'd10)/5'd5;
  assign change_penny = ((change%5'd10)%5'd5);

endmodule: vendingmachine
