// vendingmachine.vp

//; # Good Habits
//; use strict ;                   # Use a strict interpretation
//; use warnings FATAL=>qw(all);   # Turn warnings into errors
//; use diagnostics ;              # Print helpful info, for errors
//; use Math::Complex;

module `mname` (  
  input logic [1:0] coin,
  input logic coininserted,
  input logic clk,
  input logic rst,
  output logic coke,
  output logic [1:0] change_dime,
  output logic change_nickel,
  output logic [2:0] change_penny);
  
  logic [5:0] state, state_nxt;
  logic [4:0] change;

  parameter PENNY=2'b00, NICKEL=2'b01, DIME=2'b10, QUARTER=2'b11;
  
//; for( my $i = 0 ; $i < 6 ; $i++ ){
//;  my $dff = generate_base( "dff" , "D_FLIP_FLOP_STATE".$i);
`$dff->instantiate()` ( .d(state_nxt[`$i`]), .q(state[`$i`]), .clk(clk), .rst(rst));
//; }
  
  
  always_comb begin
    if(~coke) begin
      unique case({coininserted,coin})
        {1'b1,PENNY} 	: state_nxt = state+1; //penny
        {1'b1,NICKEL} 	: state_nxt = state+5; //nickel
        {1'b1,DIME} 	: state_nxt = state+10; //dime
        {1'b1,QUARTER} 	: state_nxt = state+25; //quarter
        default 	: state_nxt = state;
      endcase
    end
    else begin
      state_nxt = 0;
    end
  end
  
  assign coke = (state >= 35) ? 1'b1 : 1'b0;

  assign change = {5{coke}} ? (state-6'd35) : 5'd0;
  
  assign change_dime = change/5'd10;
  assign change_nickel = (change%5'd10)/5'd5;
  assign change_penny = ((change%5'd10)%5'd5);

endmodule: `mname`
