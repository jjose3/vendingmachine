// fairArb.vp

//; # Good Habits
//; use strict ;                   # Use a strict interpretation
//; use warnings FATAL=>qw(all);   # Turn warnings into errors
//; use diagnostics ;              # Print helpful info, for errors
//; use Math::Complex;

//; #Parameters
//; my $bW = parameter( name=>"bitWidth", val=>16, doc=>"Width of input");
//; my $cbW = logn($self->get_param("bitWidth"), 2);

module `mname` (
input logic [`$bW-1`:0] bids,
output logic [`$bW-1`:0] wins,
input logic clk,
input logic rst
);

logic [`$cbW-1`:0] pctr;
logic [`$bW-1`:0] shift_bids;
logic [`$bW-1`:0] shift_wins;
logic [`$bW-1`:0] wins_nxt;


always_comb begin
	case (1'b1)
//; for( my $i = $bW-1 ; $i >= 0 ; $i-- ){
		wins[`$i`] : pctr = `$cbW`'d`$i`;
//;}
		default : pctr = `$cbW`'d0;
	endcase
end

always_comb begin
	case (pctr)
		`$cbW`'d0 : shift_bids = bids[`$bW-1`:0];
		//; for( my $i = 1 ; $i < $bW ; $i++ ){
		`$cbW`'d`$i` : shift_bids = {bids[`$i-1`:0],bids[`$bW-1`:`$i`]};
		//;}

	endcase
end

always_comb begin
	priority case (1'b1)
		//; for( my $i = $bW-1 ; $i >= 0 ; $i-- ){
		shift_bids[`$i`] : shift_wins[`$bW-1`:0] = `$bW`'b`'0'x($bW-$i-1) . '1' .'0'x($i)`;
		//;}
		default : shift_wins[`$bW-1`:0] = `$bW`'d0;

	endcase
end

always_comb begin
	case (pctr)
		`$cbW`'d0 : wins_nxt = shift_wins[`$bW-1`:0];
		//; for( my $i = 1 ; $i < $bW ; $i++ ){
		`$cbW`'d`$i` : wins_nxt = {shift_wins[`$bW-$i-1`:0],shift_wins[`$bW-1`:`$bW-$i`]};
		//;}

	endcase
end

///////FLops instantiation

//; for( my $i = 0 ; $i < $bW ; $i++ ){
//;  my $dff = generate_base( "dff" , "D_FLIP_FLOP_WINS".$i);
`$dff->instantiate()` ( .d(wins_nxt[`$i`]), .q(wins[`$i`]), .clk(clk), .rst(rst));
//; }

endmodule: `mname`
