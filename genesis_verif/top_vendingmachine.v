//
//--------------------------------------------------------------------------------
//          THIS FILE WAS AUTOMATICALLY GENERATED BY THE GENESIS2 ENGINE        
//  FOR MORE INFORMATION: OFER SHACHAM (CHIP GENESIS INC / STANFORD VLSI GROUP)
//    !! THIS VERSION OF GENESIS2 IS NOT FOR ANY COMMERCIAL USE !!
//     FOR COMMERCIAL LICENSE CONTACT SHACHAM@ALUMNI.STANFORD.EDU
//--------------------------------------------------------------------------------
//
//  
//	-----------------------------------------------
//	|            Genesis Release Info             |
//	|  $Change: 11904 $ --- $Date: 2013/08/03 $   |
//	-----------------------------------------------
//	
//
//  Source file: /afs/asu.edu/users/j/j/o/jjose3/vendingmachine/vendingmachine/verif/top_vendingmachine.vp
//  Source template: top_vendingmachine
//
// --------------- Begin Pre-Generation Parameters Status Report ---------------
//
//	From 'generate' statement (priority=5):
//
//		---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----
//
//	From Command Line input (priority=4):
//
//		---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----
//
//	From XML input (priority=3):
//
//		---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----
//
//	From Config File input (priority=2):
//
// ---------------- End Pre-Generation Pramameters Status Report ----------------

//top_fairArb.vp


module top_vendingmachine ();




    logic [1:0] coin;
    logic coininserted;
    logic clk;
    logic rst;
    logic coke;
    logic [1:0] change_dime;
    logic change_nickel;
    logic [2:0] change_penny;

    logic 	      perf ; 


    logic             triggerStart;
    logic             triggerStop;
    int               seed;
    int               clk_period, amount;

// Instantiate the design under test and basic bench
    vendingmachine  my_vendingmachine (.*);
    generic_bench_unq1  BASIC_BENCH  (.*);

// Simulation Narrative
    initial begin
	coin = 0;
	coininserted = 0;
    	triggerStart  = 1'b0 ;
    	triggerStop = 1'b0 ;
    	perf = 1'b0 ; 
    	repeat(10) @(posedge clk );
    	triggerStart  = 1'b1 ;
	//$monitor("Monitor:  coin: %d coininserted: %d coke: %d coke: %d change_dime: %d change_nickel: %d change_penny: %d %0t", coin,coininserted,coke,coke,change_dime,change_nickel,change_penny,$time);
	repeat(10) @(posedge coke );
    	triggerStop = 1'b1 ;
    	repeat(10) @(posedge clk );
    	$finish();
    end

    always @(negedge clk) begin
	if(triggerStart && ~triggerStop) begin
		coin = $random();
		coininserted = $random();
		if(~coke) begin
			if(coininserted) begin
				case(coin)
					0 : begin amount = amount+1; $display("\t Time %0t - PROGRESS: A penny is inserted and total amount inserted=%0d", $time,amount); end
					1 : begin amount = amount+5; $display("\t Time %0t - PROGRESS: A nickel is inserted and total amount inserted=%0d", $time, amount); end 
					2 : begin amount = amount+10; $display("\t Time %0t - PROGRESS: A dime is inserted and total amount inserted=%0d",$time, amount); end
					3 : begin amount = amount+25; $display("\t Time %0t - PROGRESS: A quarter is inserted and total amount inserted=%0d",$time, amount); end
				endcase
				//$display("amount = %d", amount);
			end else;
		end else begin
			amount = 0;
		end
	end else begin
		coin = 0;
		coininserted = 0;
		amount = 0;
	end
    end

//    always @(posedge coke) begin		
//    	if(amount == (35 + (change_dime*10) + (change_nickel*5) + (change_penny*1))) 
//		$display("Change is correct");
//	else 
//		$error("ERROR - Wrong change - expected change: %d change: %d", (amount-35), ((change_dime*10) + (change_nickel*5) + (change_penny*1)));
//    end

    assert property (@(negedge clk) coke |-> (amount == (35 + (change_dime*10) + (change_nickel*5) + (change_penny*1)))) $display("\t Time %0t - DONE: Change returned is correct - %0d",$time, ((change_dime*10)+(change_nickel*5)+(change_penny*1)));
	else begin
		$error("ERROR - Wrong change - expected change: %d change: %d", (amount-35), ((change_dime*10) + (change_nickel*5) + (change_penny*1)));
	end

    assert property (@(negedge clk) (amount >= 35) |-> $rose(coke)) $display("\t Time %0t - DONE: Coke dispensed at the right time", $time);
	else begin
		$error("Coke was not dispensed at the right time");
	end


endmodule
	

