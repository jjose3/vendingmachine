//top_fairArb.vp


module `mname` ();

//; my $dut = generate_base("vendingmachine", "my_vendingmachine");

//; my $gb = generate("generic_bench", "BASIC_BENCH");

//; my $pc = generate("cycle_counter", "PERF_COUNT", CycleName=>"multRate_cyc");
//; my $ec = generate("cycle_counter", "ERROR_COUNT", CountName=>"mult_err_cnt");

    logic [1:0] coin;
    logic coininserted;
    logic clk;
    logic rst;
    logic coke;
    logic [1:0] change_dime;
    logic change_nickel;
    logic [2:0] change_penny;

    logic 	      perf ; 


    logic             triggerStart;
    logic             triggerStop;
    int               seed;
    int               clk_period, amount;

// Instantiate the design under test and basic bench
    `$dut->instantiate()` (.*);
    `$gb->instantiate()`  (.*);
    //;#`$pc->instantiate()`  (.triggerStart(perf), .triggerStop(triggerStop), .increment(qr_valid), .clk(clk), .rst(rst) );
    //;#`$ec->instantiate()`  (.triggerStart(triggerStart), .triggerStop(triggerStop), .increment(qr_err), .clk(clk), .rst(rst) );

// Simulation Narrative
    initial begin
	coin = 0;
	coininserted = 0;
    	triggerStart  = 1'b0 ;
    	triggerStop = 1'b0 ;
    	perf = 1'b0 ; 
    	repeat(10) @(posedge clk );
    	triggerStart  = 1'b1 ;
	//$monitor("Monitor:  coin: %d coininserted: %d coke: %d coke: %d change_dime: %d change_nickel: %d change_penny: %d %0t", coin,coininserted,coke,coke,change_dime,change_nickel,change_penny,$time);
	repeat(10) @(posedge coke );
    	triggerStop = 1'b1 ;
    	repeat(10) @(posedge clk );
    	$finish();
    end

    always @(negedge clk) begin
	if(triggerStart && ~triggerStop) begin
		coin = $random();
		coininserted = $random();
		if(~coke) begin
			if(coininserted) begin
				case(coin)
					0 : amount = amount+1;
					1 : amount = amount+5;
					2 : amount = amount+10;
					3 : amount = amount+25; 
				endcase
				//$display("amount = %d", amount);
			end else;
		end else begin
			amount = 0;
		end
	end else begin
		coin = 0;
		coininserted = 0;
		amount = 0;
	end
    end

    always @(posedge coke) begin		
    	if(amount == (35 + (change_dime*10) + (change_nickel*5) + (change_penny*1))) 
		$display("Change is correct");
	else 
		$error("ERROR - Wrong change - expected change: %d change: %d", (amount-35), ((change_dime*10) + (change_nickel*5) + (change_penny*1)));
    end

    assert property (@(negedge clk) (amount >= 35) |-> $rose(coke)) $display("coke dispensed at the right time");
	else begin
		$error("coke was not dispensed at the right time");
	end


endmodule
	

