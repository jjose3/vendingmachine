//top_conv5.vp


module `mname` ();

//; my $dut = generate_base("conv5", "my_conv5");
//; my $bW = $dut->get_param("bitWidth");
//; my $tp = $dut->get_param("taps");
//; my $dl = $dut->get_param("Delay");
//; my $nf = $dut->get_param("normfactor");

//; my $gb = generate("generic_bench", "BASIC_BENCH");

//; my $pc = generate("cycle_counter", "PERF_COUNT", CycleName=>"multRate_cyc");
//; my $ec = generate("cycle_counter", "ERROR_COUNT", CountName=>"mult_err_cnt");

    logic [`$bW-1`:0] unfilteredData, my_unfilteredData0, my_unfilteredData1, my_unfilteredData2, my_unfilteredData3, my_unfilteredData4;
    logic [`$bW-1`:0] tapWeights[`$tp-1`:0];
    logic [`$bW-1`:0] filteredData;

    logic             clk;
    logic             rst;

    logic 			  perf ; 

    logic             fir_err ;

    logic             triggerStart;
    logic             triggerStop;
    int               seed;
    int               clk_period ;

    // Instantiate the design under test and basic bench
    `$dut->instantiate()` (.unfilteredData(unfilteredData), .tapWeights(tapWeights), .filteredData(filteredData), .clk(clk), .rst(rst));
    `$gb->instantiate()`  (.*);
    //;#`$pc->instantiate()`  (.triggerStart(perf), .triggerStop(triggerStop), .increment(qr_valid), .clk(clk), .rst(rst) );
    `$ec->instantiate()`  (.triggerStart(triggerStart), .triggerStop(triggerStop), .increment(fir_err), .clk(clk), .rst(rst) );
   // TODO event counter

    // Simulation Narrative
    initial begin
    	triggerStart  = 1'b0 ;
    	triggerStop = 1'b0 ;
    	perf = 1'b0 ; 
    	//@(negedge rst);
    	repeat(100) @(posedge clk );
    	triggerStart  = 1'b1 ;
    	repeat(50) @(posedge clk );  //Wait 100k z_valids
    	//perf = 1'b1 ;
    	//repeat(5) @(posedge clk );  //Wait 100k z_valids
    	triggerStop = 1'b1 ;
    	repeat(10) @(posedge clk );
    	$finish();
    end

    // Frontend Driver
    always @( negedge clk ) begin
    	// Test bench driven signal start at negedg
    	//   so it is obv they came from the bench 
    	if(triggerStart && ~triggerStop) begin
		unfilteredData = $random() ;
    		tapWeights[0] =  `$bW`'d60; 
    		tapWeights[1] =  `$bW`'d60; 
    		tapWeights[2] =  `$bW`'d60; 
    		tapWeights[3] =  `$bW`'d60; 
    		tapWeights[4] =  `$bW`'d16; 

	end
    end

    // Verification
//    always @( posedge clk ) begin
//    	#1
//    	// Wait one tick to see what was flopped
//        qr_err = 1'b0 ;
//    	if( qr_valid ) begin
//		$display("%t:CALCULATION DONE quo = %h rem = %h num = %h den = %h\n", $time, quo, rem, last_num, last_den);
//    		assert( quo == (last_num / last_den) ) else 
//    			$display("%t: Error - quo is wrong\n", $time);
//		assert( rem == (last_num % last_den) ) else 
//    			$display("%t: Error - rem is wrong\n", $time());
//            qr_err = ( quo != (last_num / last_den) ) ;
//    	end
//
//    end



endmodule 
